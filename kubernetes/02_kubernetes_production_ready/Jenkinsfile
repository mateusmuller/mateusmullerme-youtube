pipeline {
  agent none
  parameters {
    choice(name: 'CREATE_OR_DESTROY', choices: ['Create', 'Destroy'], description: 'Would you like to create or destroy the cluster?')
  }
  environment {
    PM_API_TOKEN_ID = credentials('pm-api-token-id')
    PM_API_TOKEN_SECRET = credentials('pm-api-token-secret')
    AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
    AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
  }
  stages {
    stage('init') {
      agent {
        docker {
          image 'hashicorp/terraform:1.9.8'
          args '--entrypoint=""'
        }
      }
      steps {
        dir('kubernetes/02_kubernetes_production_ready/terraform') {
          sh '''
            terraform init -no-color
          '''
        }
      }
    }
    stage('plan') {
      agent {
        docker {
          image 'hashicorp/terraform:1.9.8'
          args '--entrypoint=""'
        }
      }
      steps {
        dir('kubernetes/02_kubernetes_production_ready/terraform') {
          withCredentials([sshUserPrivateKey(credentialsId: 'mateus-public-key', keyFileVariable: 'MATEUS_PUBLIC_KEY')]) {
            sh '''
              cp "$MATEUS_PUBLIC_KEY" id_rsa.pub
              terraform plan -no-color
            '''
          }
        }
      }
      when {
        expression {
          params.CREATE_OR_DESTROY == "Create"
        }
      }
    }
    stage('apply') {
      agent {
        docker {
          image 'hashicorp/terraform:1.9.8'
          args '--entrypoint=""'
        }
      }
      steps {
        dir('kubernetes/02_kubernetes_production_ready/terraform') {
          withCredentials([sshUserPrivateKey(credentialsId: 'mateus-public-key', keyFileVariable: 'MATEUS_PUBLIC_KEY')]) {
            sh '''
              terraform apply -no-color -auto-approve
            '''
          }
        }
      }
      when {
        expression {
          params.CREATE_OR_DESTROY == "Create"
        }
      }
    }
    stage('destroy') {
      agent {
        docker {
          image 'hashicorp/terraform:1.9.8'
          args '--entrypoint=""'
        }
      }
      steps {
        dir('kubernetes/02_kubernetes_production_ready/terraform') {
          withCredentials([sshUserPrivateKey(credentialsId: 'mateus-public-key', keyFileVariable: 'MATEUS_PUBLIC_KEY')]) {
            sh '''
              terraform apply -no-color -auto-approve -destroy
            '''
          }
        }
      }
      when {
        expression {
          params.CREATE_OR_DESTROY == "Destroy"
        }
      }
    }
  }
}
